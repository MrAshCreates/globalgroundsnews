// backend/server.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const mongoose = require('mongoose');

const http = require('http');
const app = require('./app');
const socketIo = require('socket.io');
const userRoutes = require('./routes/userRoutes');
// Add other routes as needed
require('dotenv').config();
 

app.use(cors());
app.use(helmet());
app.use(express.json());

// Connect to MongoDB


const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: '*',
  },
});

// In your server.js or app.js
mongoose
  .connect(process.env.MONGO_URI)
  .then(() => {
    console.log('MongoDB connection established successfully.');
    // Start your server here
  })
  .catch((error) => {
    console.error('MongoDB connection error:', error);
  });

// Socket.IO logic here
io.on('connection', (socket) => {
  console.log('New client connected:', socket.id);

  // Handle chat events
  socket.on('joinRoom', ({ roomId }) => {
    socket.join(roomId);
  });

  socket.on('sendMessage', (message) => {
    io.to(message.roomId).emit('receiveMessage', message);
  });

  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

const PORT = process.env.PORT || 5001;
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});